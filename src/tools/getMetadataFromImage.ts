/**
 * Get metadata from image tool - Extract embedded metadata from generated images
 */

import * as fs from 'fs/promises';
import * as path from 'path';
import { McpError, ErrorCode } from '@modelcontextprotocol/sdk/types.js';
import { extractMetadataFromImage, verifyIntegrity } from '../utils/metadata.js';
import { getDatabase } from '../utils/database.js';
import { normalizeInputPath, getDisplayPath } from '../utils/path.js';
import { debugLog } from '../utils/cost.js';

export interface GetMetadataParams {
  image_path: string;
}

export async function getMetadataFromImage(params: GetMetadataParams): Promise<string> {
  debugLog('Get metadata from image called with params:', params);

  const { image_path } = params;

  // Validation
  if (!image_path || image_path.trim().length === 0) {
    throw new McpError(
      ErrorCode.InvalidParams,
      'image_path is required and cannot be empty'
    );
  }

  try {
    // Normalize and validate image path
    const resolvedPath = await normalizeInputPath(image_path);
    debugLog(`Resolved image path: ${resolvedPath}`);

    // Get file stats
    const stats = await fs.stat(resolvedPath);
    const fileSizeKB = (stats.size / 1024).toFixed(2);

    // Determine format from file extension
    const ext = path.extname(resolvedPath).toLowerCase().replace('.', '');
    const format = ext === 'jpg' ? 'jpeg' : ext;

    // Extract metadata from image
    const metadata = await extractMetadataFromImage(resolvedPath);

    if (!metadata) {
      return `üì∑ Image Metadata

File: ${getDisplayPath(resolvedPath)}
Format: ${format}
File size: ${fileSizeKB} KB

‚ùå No OpenAI GPT-Image metadata found in this image

This image may have been:
- Generated by a different tool
- Created before metadata embedding was enabled
- Edited by an image editor that removed metadata`;
    }

    // Build metadata display
    let result = `üì∑ Image Metadata

File: ${getDisplayPath(resolvedPath)}
Format: ${format}
File size: ${fileSizeKB} KB

üîñ Embedded Metadata

UUID: ${metadata.openai_gpt_image_uuid}
Parameters Hash: ${metadata.params_hash.substring(0, 16)}...

`;

    // Standard and full level metadata
    if (metadata.tool_name) {
      result += `Tool: ${metadata.tool_name}\n`;
    }

    if (metadata.model) {
      result += `Model: ${metadata.model}\n`;
    }

    if (metadata.created_at) {
      result += `Created: ${metadata.created_at}\n`;
    }

    if (metadata.size) {
      result += `Size: ${metadata.size}\n`;
    }

    if (metadata.quality) {
      result += `Quality: ${metadata.quality}\n`;
    }

    // Full level metadata
    if (metadata.prompt) {
      result += `\nPrompt: ${metadata.prompt}\n`;
    }

    if (metadata.parameters) {
      result += `\nParameters: ${JSON.stringify(metadata.parameters, null, 2)}\n`;
    }

    // Look up database record
    const db = getDatabase();
    const historyRecord = db.getByUuid(metadata.openai_gpt_image_uuid);

    if (historyRecord) {
      result += `\nüìä Database Record Found

Status: ‚úì Found
Tool: ${historyRecord.tool_name}
Sample Count: ${historyRecord.sample_count}
Created: ${historyRecord.created_at}
`;

      // Verify integrity
      // Reconstruct full params object from DB record for hash verification
      const dbParams = JSON.parse(historyRecord.parameters);
      const fullDbParams = {
        model: 'gpt-image-1',
        prompt: historyRecord.prompt,
        ...dbParams,
      };
      const integrity = verifyIntegrity(metadata, fullDbParams);

      if (integrity.valid) {
        result += `\nüîê Integrity Check: ‚úì Valid\n${integrity.message}`;
      } else {
        result += `\n‚ö†Ô∏è Integrity Check: ‚úó Failed\n${integrity.message}

This may indicate:
- Image parameters were modified after generation
- Database record was updated
- Parameter calculation method changed`;
      }
    } else {
      result += `\nüìä Database Record: ‚ùå Not Found

The image contains valid metadata, but no matching database record was found.
This may happen if:
- The database was reset or deleted
- The image was generated on a different system
- The database location changed`;
    }

    return result;
  } catch (error: any) {
    debugLog('Error getting metadata from image:', error);

    if (error instanceof McpError) {
      throw error;
    }

    throw new McpError(
      ErrorCode.InternalError,
      `Failed to get metadata from image: ${error.message}`
    );
  }
}
